{"version":3,"file":"cms.cfa2b30238e471dcefa4.hot-update.js","sources":["webpack:///./src/templates/blog-post.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Content, { HTMLContent } from '../components/Content'\n\nexport const BlogPostTemplate = ({\n  content,\n  contentComponent,\n  description,\n  tags,\n  title,\n  helmet,\n}) => {\n  const PostContent = contentComponent || Content\n\n  return (\n    <div>\n      <div\n        className=\"full-width-image-container margin-top-0\"\n        style={{\n          backgroundImage: `url('/img/lmb-jumbotron.jpg')`,\n        }}\n      >\n        <h1\n          className=\"has-text-weight-bold is-size-1\"\n          style={{\n            boxShadow: \"0.5rem 0 0 #62259d, -0.5rem 0 0 #62259d\",\n            backgroundColor: \"#62259d\",\n            color: \"white\",\n            padding: \"1rem\",\n          }}\n        >\n          {title}\n        </h1>\n      </div>\n      <section className=\"section\">\n      {helmet || ''}\n      <div className=\"container content\">\n        <div className=\"columns\">\n          <div className=\"column is-10 is-offset-1\">\n            <h1 className=\"title is-size-2 has-text-weight-bold is-bold-light\">\n              {title}\n            </h1>\n            <p>{description}</p>\n            <PostContent content={content} />\n            {tags && tags.length ? (\n              <div style={{ marginTop: `4rem` }}>\n                <h4>Tags</h4>\n                <ul className=\"taglist\">\n                  {tags.map(tag => (\n                    <li key={tag + `tag`}>\n                      <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </section>\n    </div>\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  content: PropTypes.node.isRequired,\n  contentComponent: PropTypes.func,\n  description: PropTypes.string,\n  title: PropTypes.string,\n  helmet: PropTypes.object,\n}\n\nconst BlogPost = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <BlogPostTemplate\n        content={post.html}\n        contentComponent={HTMLContent}\n        heroImage={post.frontmatter.featuredimage}\n        description={post.frontmatter.description}\n        helmet={\n          <Helmet titleTemplate=\"%s | Blog\">\n            <title>{`${post.frontmatter.title}`}</title>\n            <meta\n              name=\"description\"\n              content={`${post.frontmatter.description}`}\n            />\n          </Helmet>\n        }\n        tags={post.frontmatter.tags}\n        title={post.frontmatter.title}\n      />\n      {console.log(post.frontmatter.featuredimage)}\n    </Layout>\n  )\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object,\n  }),\n}\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        description\n        tags\n      }\n    }\n  }\n`\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AADA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AAfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AADA;AADA;AAMA;AAAA;AAEA;;;;;;;;;;AAvGA;AAoEA;AAmCA;;;;;;;;;;;;;;A","sourceRoot":""}